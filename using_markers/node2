struct Point
{
    float x,
    float y,
    float z
};

int main()
{
    ros::init(argc, argv, "basic_shapes");
    ros::NodeHandle n;
    ros::Publisher marker_pub =
    n.advertise<visualization_msgs::MarkerArray>("marker/node", 1);

    Ponit p;
    std::vector<Point> vec_point;
    for( int i = 0; i < 10; i++)
    {
        p.x = i;
        p.y = i;
        p.z = i;
        vec_point.push_back(p);
    }
    visualization_msgs::MarkerArray node_link_arr;
    for(size_t i = 0; i < vec_point.size(); i++){
        for(size_t j = i+1; j < vec_point.size(); j++)
        {
            visualization_msgs::Marker node_link;
            node_link.header.frame_id = "/map";
            node_link.header.stamp = ros::Time::now();
            node_link.id = i*10+j;
            node_link.action = visualization_msgs::Marker::ADD;
            node_link.pose.orientation.w = 1.0;

            node_link.color.g = 1.0f;
            node_link.color.a = 1.0;
            node_link.scale.x = 0.1;
            node_link.scale.y = 0.4;
            node_link.type = visualization_msgs::Marker::ARROW;

            geometry_msgs::Point start_p, end_p;
            start_p.x = vec_point[i].x;
            start_p.y = vec_point[i].y;
            node_link.points.push_back(start_p);

            end_p.x = vec_point[j].x;
            end_p.y = vec_point[j].y;
            node_link.points.push_back(end_p);

            node_link_arr.markers.push_back(node_link);
        }
    }
    marker_pub .publish(node_link_arr);
}